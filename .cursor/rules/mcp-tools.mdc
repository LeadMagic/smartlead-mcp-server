---
name: SmartLead MCP Tools Reference
description: Complete reference guide for all 116+ MCP tools organized by category
author: LeadMagic Team
version: 1.0.0
tags: [mcp-tools, smartlead-api, tools-reference, automation]
globs: ["src/tools/**/*.ts", "src/server.ts"]
alwaysApply: false
priority: medium
---

# SmartLead MCP Tools - Complete Reference Guide

## 🛠️ **MCP Tool Categories**

### **📊 Analytics Tools** (`src/tools/analytics.ts`)
**18 tools** for campaign analytics and reporting:
- `smartlead_get_analytics_campaign_list` - List campaigns with analytics
- `smartlead_get_analytics_client_list` - Client analytics overview
- `smartlead_get_analytics_overall_stats_v2` - Overall performance statistics
- `smartlead_get_analytics_day_wise_overall_stats` - Daily performance breakdown
- And 14 more analytics tools...

### **🎯 Campaign Tools** (`src/tools/campaigns.ts`)
**14 tools** for campaign management:
- `smartlead_create_campaign` - Create new campaigns
- `smartlead_update_campaign_schedule` - Modify sending schedules
- `smartlead_get_campaigns_with_analytics` - Combined campaign and analytics data
- `smartlead_list_campaigns` - List all campaigns with filtering
- And 10 more campaign tools...

### **👥 Lead Tools** (`src/tools/leads.ts`)
**17 tools** for lead and prospect management:
- `smartlead_add_leads_to_campaign` - Import prospects to campaigns
- `smartlead_list_leads_by_campaign` - Get campaign prospects
- `smartlead_fetch_lead_by_email` - Find prospects by email
- `smartlead_update_lead_category` - Categorize prospects
- And 13 more lead tools...

### **📧 Email Account Tools** (`src/tools/email-accounts.ts`)
**15 tools** for email account management:
- `smartlead_create_email_account` - Add new sending accounts
- `smartlead_add_update_warmup_to_email_account` - Configure warmup
- `smartlead_fetch_all_email_accounts` - List all email accounts
- `smartlead_update_email_account` - Modify account settings
- And 11 more email account tools...

### **📈 Statistics Tools** (`src/tools/statistics.ts`)
**18 tools** for statistics and metrics:
- `smartlead_fetch_campaign_statistics` - Campaign performance stats
- `smartlead_fetch_warmup_stats_by_email_account` - Warmup statistics
- `smartlead_download_campaign_data` - Export campaign data
- `smartlead_fetch_campaign_top_level_analytics` - High-level analytics
- And 14 more statistics tools...

### **🚀 Smart Delivery Tools** (`src/tools/smart-delivery.ts`)
**11 tools** for deliverability optimization:
- `smartlead_create_manual_placement_test` - Manual spam testing
- `smartlead_create_automated_placement_test` - Automated spam testing
- `smartlead_get_spam_test_details` - Test result details
- `smartlead_get_provider_wise_report` - Provider performance reports
- And 7 more smart delivery tools...

### **🤖 Smart Senders Tools** (`src/tools/smart-senders.ts`)
**12 tools** for domain and sender management:
- `smartlead_search_domain` - Domain reputation lookup
- `smartlead_get_vendors` - Available email service providers
- `smartlead_auto_generate_mailboxes` - Generate email accounts
- `smartlead_get_domain_list` - List owned domains
- And 8 more smart senders tools...

### **🔗 Webhook Tools** (`src/tools/webhooks.ts`)
**9 tools** for webhook management:
- `smartlead_fetch_webhooks_by_campaign` - Campaign webhooks
- `smartlead_upsert_campaign_webhook` - Create/update webhooks
- `smartlead_delete_campaign_webhook` - Remove webhooks
- `smartlead_get_webhooks_publish_summary` - Webhook delivery stats
- And 5 more webhook tools...

### **👤 Client Management Tools** (`src/tools/client-management.ts`)
**8 tools** for team and client management:
- `smartlead_create_client` - Add new team members
- `smartlead_get_all_clients` - List all clients
- `smartlead_create_client_api_key` - Generate API keys
- `smartlead_get_team_details` - Team information and metrics
- And 4 more client management tools...

## 🏗️ **Tool Development Patterns**

### **Tool Registration Structure**
Reference **[src/tools/index.ts](mdc:src/tools/index.ts)** for the central registration pattern:
```typescript
// Export all tool registration functions
export { registerAnalyticsTools } from './analytics.js';
export { registerCampaignTools } from './campaigns.js';
export { registerLeadTools } from './leads.js';
// ... other exports
```

### **Individual Tool File Pattern**
Each tool file follows this structure (see **[src/tools/campaigns.ts](mdc:src/tools/campaigns.ts)** as example):
```typescript
export function registerCampaignTools(
  server: McpServer,
  client: SmartLeadClient,
  formatSuccessResponse: (message: string, data: unknown, summary?: string) => MCPToolResponse,
  handleError: (error: unknown) => MCPToolResponse
): void {
  // Tool registrations...
}
```

### **Schema Definition Pattern**
All input schemas use Zod (defined in **[src/types.ts](mdc:src/types.ts)**):
```typescript
const CreateCampaignSchema = z.object({
  name: z.string().min(1, 'Campaign name is required'),
  from_email: z.string().email('Valid email address required'),
  sequences: z.array(z.object({
    subject: z.string(),
    body: z.string(),
    delay_days: z.number().min(0)
  })).optional()
});
```

## 🎯 **Tool Implementation Guidelines**

### **Tool Naming Standards**
- **Prefix**: Always start with `smartlead_`
- **Action**: Use clear verbs (`get`, `create`, `update`, `delete`, `list`, `fetch`)
- **Resource**: Include the primary resource being acted upon
- **Specificity**: Add specificity when needed (`by_campaign`, `by_email`, etc.)

### **Tool Description Standards**
- **Be specific** about what the tool does
- **Include use cases** when helpful
- **Mention important parameters** in the description
- **Keep it concise** but informative

### **Input Schema Best Practices**
1. **Use descriptive field names** that match SmartLead API
2. **Add validation messages** for better user experience
3. **Mark optional fields** appropriately with `.optional()`
4. **Use appropriate Zod types** (`.email()`, `.url()`, `.min()`, etc.)
5. **Group related fields** logically

### **Response Handling Patterns**
```typescript
try {
  const validatedParams = Schema.parse(params);
  const result = await client.module.method(validatedParams);
  
  // Provide helpful summary when possible
  const summary = `Created campaign: ${validatedParams.name}`;
  
  return formatSuccessResponse(
    'Campaign created successfully',
    result,
    summary
  );
} catch (error) {
  return handleError(error);
}
```

## 🔧 **Helper Functions**

### **Response Formatters**
Defined in **[src/server.ts](mdc:src/server.ts)**:
- `formatSuccessResponse(message, data, summary?)` - Standard success response
- `handleError(error)` - Standard error response with proper formatting

### **Common Validation Patterns**
From **[src/types.ts](mdc:src/types.ts)**:
```typescript
// Email validation
email: z.string().email('Valid email address required')

// Required string with minimum length
name: z.string().min(1, 'Name is required')

// Optional array with validation
tags: z.array(z.string()).optional()

// Enum validation
status: z.enum(['active', 'paused', 'completed'])

// Number with constraints
delay_days: z.number().min(0).max(365)
```

## 📊 **Tool Categories by Function**

### **Read Operations** (Non-destructive)
- `get_*`, `list_*`, `fetch_*` tools
- Safe to call repeatedly
- No side effects on SmartLead data

### **Write Operations** (Create/Update)
- `create_*`, `add_*`, `update_*` tools
- Modify SmartLead data
- Should include confirmation in responses

### **Delete Operations** (Destructive)
- `delete_*`, `remove_*` tools
- Permanently modify data
- Should include clear warnings in descriptions

### **Analytics Operations** (Read-only)
- Analytics and statistics tools
- Often return large datasets
- May have date range parameters

## 🚀 **Advanced Tool Features**

### **Bulk Operations**
Some tools handle bulk operations:
- `smartlead_add_leads_to_campaign` - Import multiple prospects
- `smartlead_bulk_update_email_accounts` - Update multiple accounts

### **Export/Download Tools**
Tools that return downloadable data:
- `smartlead_download_campaign_data` - Export campaign data
- `smartlead_export_analytics_data` - Export analytics reports

### **Real-time Tools**
Tools for real-time data:
- `smartlead_get_real_time_stats` - Live performance metrics
- `smartlead_get_webhook_logs` - Recent webhook activity

## 🎯 **Testing and Validation**

### **Tool Testing Checklist**
1. **Schema validation** works for all required/optional fields
2. **Error handling** provides helpful messages
3. **Success responses** include meaningful summaries
4. **API integration** correctly calls SmartLead endpoints
5. **Type safety** maintained throughout the call chain

### **Common Issues to Avoid**
1. **Missing input validation** - Always use Zod schemas
2. **Poor error messages** - Provide context and solutions
3. **Inconsistent naming** - Follow the established patterns
4. **Missing descriptions** - Every tool needs clear documentation
5. **Type casting** - Avoid `any` types, use proper interfaces
